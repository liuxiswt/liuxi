treeMap(红黑树)
       1、每个节点都只能是红色或者黑色
       2、根节点是黑色
       3、每个叶节点（NIL节点，空节点）是黑色的。
       4、如果一个结点是红的，则它两个子节点都是黑的。也就是说在一条路径上不能出现相邻的两个红色结点。
       5、从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。
       
hashMap(底层实现jdk1.8) 初始16，加载因子0.75
    数组 + （每个元素为头）链表     
    根据key算hash值，相同则覆盖。 
    冲突则在hash值处链表+1，链表越长遍历时间复杂度O(n).   
    冲突解决方法：开放定址法，再散列法，链地址法（hashMap使用），扰动函数可以减少碰撞，原理是如果两个不相等的对象返回不同的hashcode的。使用不可变的、声明作final的对象，String，Interger这样的wrapper类作为键是非常好的选择
    1.8之后，当链表长度大于8时，转化为红黑树结构 时间复杂度O(logn)   当链表小于6时，红黑树转化为链表
ConcurrentHashMap
   线程安全的 （数组+链表+红黑树）初始容量 (16)、加载因子 (0.75)  对hashMap而言，添加了Unsafe实例，主要用于反射获取对象相应的字段
   JDK1.7采用segment的分段锁机制实现线程安全，其中segment继承自ReentrantLock。
   JDK1.8采用CAS+Synchronized保证线程安全。
   锁的粒度：原来是对需要进行数据操作的Segment加锁，现调整为对每个数组元素加锁（Node）
   
hash一致算法（哈希环）
eg:缓存数据a存储在顺时针最近的一个服务器节点A上，当A宕机时，只需要迁移a至下一个最近的服务器节点B上即可，当分布不均匀时，可以增加虚节点，使节点在环上
更均匀的分布，尽可能小的影响数据迁移和分布均匀。
    对节点和数据，都做一次hash运算，然后比较节点和数据的hash值，数据值和节点最相近的节点作为处理节点。
    为了分布得更均匀，通过使用虚拟节点的方式，每个节点计算出n个hash值，均匀地放在hash环上这样数据就能比较均匀地分布到每个节点。

浅拷贝：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。
深拷贝：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。

GC算法
    标记-清除  复制  标记-压缩  分代收集算法
GC回收策略
    引用计数法  可达性分析法
GC机制
    对象 可达性没有引用，标记一次，筛选，是否有必要执行finalize()回收。有必要，对象放置F—Queue队列中，自动创建低优先级Finalizer线程实现回收。
    
线程池创建的核心构造参数
    corePoolSize（核心线程数） queueCapacity（任务队列容量）maxPoolSize（最大线程数）keepAliveTime（线程空闲时间）
    allowCoreThreadTimeout（允许核心线程超时）rejectedExecutionHandler（任务拒绝处理器）

双亲委派模型机制
    如果一个类加载器接收到了类加载的请求，它首先把这个请求委托给他的父类加载器去完成，每个层次的类加载器都是如此，
    因此所有的加载请求都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它在搜索范围中没有找到所需的类）时，
    子加载器才会尝试自己去加载。

乐观锁，悲观锁
    悲观锁：阻塞直到获取锁，eg: synchronized和ReentrantLock等独占锁,适用于多写的情景  但可能死锁
    乐观锁：更新的时候才会判断数据正确性，利用版本号机制和CAS算法实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量 eg: java.util.concurrent.atomic

可重入锁和Synchronized、ReentrantLock
    可重复可递归调用的锁，在外层使用锁之后，在内层仍然可以使用，并且不发生死锁
    不可重入锁：不可递归调用，递归调用就发生死锁  优化：判断当前锁持有者是否是当前对象，采用state计数，不用每次去释放锁

CountDownLaunch 和 Cylicbrrior

http 和 https
    1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。
　　2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。
　　3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。
　　4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。

innoDB支持四种隔离级别 
     未提交读READ-UNCOMMITTED                   select 语句不加锁，会出现脏读。                           隔离性最差，并发最高
     串行化SERIALIZABLE           select 语句隐式转换为 select … in share mode ，与 X 锁互斥。        一致性最好，并发最差，如果有未提交的修改，所有读取这些行的 select 都会被阻塞，没有 MVCC 。
     可重复读REPEATABLE-READ                   普通 select 是 MVCC 。                              锁定读 /update/delete 使用 Record Lock 和 Next-Key Lock ，防止幻影记录出现。
     提交读READ-COMMITTED（默认）               普通 select 是 MVCC 。                             锁定读 /update/delete 使用 Record Lock ，可能出现不可重复读。 


TCP三次握手和四次挥手

Spring包括 Core Bean Context EL
Spring IOC管理Bean 的依赖关系 ---原理是工厂模式加反射机制
    IOC（BeanFactory 和 ApplicationContext）容器创建对象，配置并管理对象完整生命周期。依赖注入时，不必创建，必须描述如何创建，在配置文件中将组建和服务关联，由IOC起来。
    完成依赖注入的方式：1.构造函数注入 2.setter注入 3.接口注入（少用）
    
Spring 的设计模式


AOP原理--代理
静态代理关键是在代理对象和目标对象实现共同的接口，并且代理对象持有目标对象的引用
动态代理实现主要是实现InvocationHandler，并且将目标对象注入到代理对象中，利用反射机制来执行目标对象的方法

Tomcat基本架构
Tomca的心脏是两个组件：N个Connector + 1个Container = Service  Service可以对外提供服务，而Server服务器控制整个Tomcat的生命周期。
Connecter：连接请求监听器，创建 Request 和 Response
Container：处理请求的父容器，包括Engine（基本的关联关系）、Host（是 Engine 的子容器，保存主机信息）、Context（Servlet的执行环境）、Wrapper（管理一个Servlet）
其他组件：安全组件 security、logger 日志组件、session、mbeans、naming 等其它组件


高并发防止死锁
    1.设置加锁顺序（线程按照一定的顺序加锁）  2.设置加锁时限：（超时重试）   3.提高数据库隔离级别
    
集群和负载均衡的算法实现

分库分表设计

Redis异步队列
一般使用list结构作为队列，rpush生产消息，lpop消费消息
Redis的数据结构
list  lpush/rpush/lpop/rpop/lrem/lindex/lset
set   sadd/srem/sdiff/sinter/sunion   
hash  hget/hset/hdel/
zset  zadd/zscore/zrem/zrange/zrevrange（按分数大到小）/zrank（按元素小到大）     
string   get/set/del

缓存风险的概念解决
缓存穿透，是指查询一个数据库一定不存在的数据  ----如果从数据库查询的对象为空，也放入缓存，只是设定的缓存过期时间较短，比如设置为60秒。
缓存雪崩，是指在某一个时间段，缓存集中过期失效----一般是采取不同分类商品，缓存不同周期。在同一分类中的商品，加上一个随机因子。尽可能分散缓存过期时间
缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存----让热key缓存永不过期

MQ底层实现
    作用：异步，解耦，削峰
    jms协议 
    Pub/Sub发布订阅 
    PTP点对点

什么时候不使用MQ？
    上游实时关注执行结果
什么时候使用MQ？
    1）数据驱动的任务依赖
    2）上游不关心多下游执行结果
    3）异步返回执行时间长


高并发进行削峰 ，限流

限制瞬间并发数
比如在入口曾(nginx,http)来限制同一个IP来源的连接数,方式恶意攻击访问的情况
限制总并发数
通过配置数据库连接池,线程池大小来约束并发数
限制时间窗口的平均速率
在街口层面,通过限制访问速率来控制街口的并发请求
其他方式
限制远程街口的调用速率,限制MQ的消费速率
限流算法实现：
滑动窗口算法
一种常见的流量控制技术,用来改善吞吐量的技术
漏桶
漏桶算法能强行限制数据的传输速率
令牌桶
令牌桶用于控制速率类型的限流算法
计数器
最简单的一种,通过控制时间段内的请求次数

